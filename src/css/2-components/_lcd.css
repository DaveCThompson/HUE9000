/* src/css/components/_lcd.css */
/* Authoritative styles for all LCD screens. */

/* --- 1. LCD Container (The Outer Shell) --- */
.lcd-container {
    width: 100%;
    position: relative;
    overflow: hidden;
    border-radius: var(--space-xs);
    box-sizing: border-box;
    display: flex; /* Use flex to manage the inner wrapper */
    flex-direction: column;
    justify-content: stretch;
    align-items: stretch;
    opacity: var(--theme-component-opacity);

    /* Default to ACTIVE state styles */
    /* A solid background-color is defined as a fallback. It matches the darkest
       stop of the gradient and prevents visual flicker during theme transitions
       where the background-image gradient might not interpolate smoothly. */
    background-color: oklch(
        var(--lcd-active-grad-end-l)
        calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor))
        var(--dynamic-lcd-hue)
    );
    background-image: radial-gradient(ellipse at center,
        oklch(var(--lcd-active-grad-start-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor)) var(--dynamic-lcd-hue)) 0%,
        oklch(calc(var(--lcd-active-grad-end-l) * 0.8) calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor)) var(--dynamic-lcd-hue)) 100%
    );
    border: 1px solid oklch(var(--lcd-active-border-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor)) var(--dynamic-lcd-hue) / var(--lcd-active-border-a));
    box-shadow: var(--lcd-active-shadow-inner-glow);

    transition:
        background-color var(--transition-duration-medium) ease,
        background-image var(--transition-duration-medium) ease,
        border-color var(--transition-duration-medium) ease,
        box-shadow var(--transition-duration-medium) ease,
        opacity var(--transition-duration-medium) ease;
}

.terminal-block .actual-lcd-screen-element {
    flex-grow: 1;
    min-height: 0; /* Required for flex-grow to work correctly in a flex column */
}


/* CRT Overlay on the container */
.lcd-container::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url('/public/crt-overlay.png');
    background-size: var(--lcd-crt-overlay-size, 1920px 1120px);
    background-repeat: repeat;
    background-position: 0 0;
    mix-blend-mode: var(--lcd-crt-overlay-blend-mode, multiply);
    opacity: calc(var(--lcd-crt-overlay-opacity, 0.2) * var(--startup-opacity-factor, 0));
    pointer-events: none;
    z-index: 1;
    border-radius: inherit;
    transition: opacity var(--transition-duration-medium) ease;
}


/* --- 2. LCD Content Wrapper (The Inner, Padded Area) --- */
.lcd-content-wrapper {
    position: relative;
    z-index: 2;
    width: 100%;
    flex-grow: 1;
    box-sizing: border-box;

    /* Unified content styles */
    padding: var(--space-md);
    font-family: 'IBM Plex Mono', monospace;
    font-size: var(--lcd-content-font-size, 0.9em);
    font-weight: 500;
    line-height: 1.4;
    color: oklch(var(--lcd-active-text-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor)) var(--dynamic-lcd-hue) / var(--lcd-active-text-a));
    text-shadow: 0 0 8px oklch(var(--lcd-active-text-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-base-chroma-factor)) var(--dynamic-lcd-hue) / var(--lcd-text-shadow-base-alpha, 0.3));

    transition: color var(--transition-duration-medium) ease, text-shadow var(--transition-duration-medium) ease;
}

.lcd-content-wrapper.is-content-hidden {
    display: none !important;
}

/* Specific layout needs for content wrappers */
#hue-lcd-A .lcd-content-wrapper,
#hue-lcd-B .lcd-content-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
}
#terminal-lcd-content.lcd-content-wrapper {
    padding: var(--space-3xl);
    white-space: pre-wrap;
    word-break: break-all;
    text-align: left;
    display: block;
}


/* --- 3. State Modifications --- */

/* State: Unlit */
.lcd-container.lcd--unlit {
    background-image: none !important;
    background-color: oklch(var(--lcd-unlit-bg-l) var(--lcd-unlit-bg-c) var(--lcd-unlit-bg-h) / var(--lcd-unlit-bg-a));
    border-color: oklch(var(--lcd-unlit-border-l) var(--lcd-unlit-border-c) var(--lcd-unlit-border-h) / var(--lcd-unlit-border-a));
    box-shadow: var(--lcd-unlit-shadow);
}
.lcd-container.lcd--unlit .lcd-content-wrapper {
    color: oklch(var(--lcd-unlit-text-l) var(--lcd-unlit-text-c) var(--lcd-unlit-text-h) / var(--lcd-unlit-text-a));
    text-shadow: none;
}
.lcd-container.lcd--unlit::after {
    opacity: 0 !important;
}

/* State: Dimly Lit */
.lcd-container.lcd--dimly-lit {
    background-color: oklch(
        var(--lcd-dimly-lit-grad-end-l)
        calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor))
        var(--dynamic-lcd-hue)
    );
    background-image: radial-gradient(ellipse at center,
        oklch(var(--lcd-dimly-lit-grad-start-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor)) var(--dynamic-lcd-hue)) 0%,
        oklch(calc(var(--lcd-dimly-lit-grad-end-l) * 0.8) calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor)) var(--dynamic-lcd-hue)) 100%
    );
    border-color: oklch(var(--lcd-active-border-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor)) var(--dynamic-lcd-hue) / var(--lcd-active-border-a));
    box-shadow: var(--lcd-dimly-lit-shadow);
}
.lcd-container.lcd--dimly-lit .lcd-content-wrapper {
    color: oklch(var(--lcd-dimly-lit-text-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor)) var(--dynamic-lcd-hue) / var(--lcd-dimly-lit-text-a));
    text-shadow: 0 0 5px oklch(var(--lcd-dimly-lit-text-l) calc(var(--dynamic-lcd-chroma) * var(--lcd-dimly-lit-chroma-factor)) var(--dynamic-lcd-hue) / calc(var(--lcd-text-shadow-base-alpha) * 0.7));
}
.lcd-container.lcd--dimly-lit::after {
    opacity: calc(var(--lcd-crt-overlay-opacity, 0.2) * 0.5 * var(--startup-opacity-factor, 0));
}


/* --- 4. Component-Specific Content Styles --- */

/* Dial B's numeric value */
.lcd-value {
    font-weight: 600;
    line-height: 1;
}

/* Terminal lines inherit from the wrapper, but need their own glow for flicker effects */
.terminal-line {
    display: flex;
    align-items: baseline;
    line-height: 1.7;
    color: inherit; /* Inherit color from the content wrapper */
    /* The flicker effect will apply its own text-shadow. This is for the static state. */
    text-shadow: inherit;
}
/* src/css/animations/_startup-transition.css (Refactored for .animate-on-dim-exit) */

/*
 * This rule is active when body.is-transitioning-from-dim is present.
 * The .animate-on-dim-exit class is programmatically added by JS (uiUpdater.js, called by startupPhase10.js)
 * to specific DOM elements that need this synchronized 1-second transition when
 * switching from DIM mode to a Full Theme (Dark/Light) during startup phase P10.
 * The class is removed by JS after the transition (by FSM action calling performThemeTransitionCleanup).
 */
body.is-transitioning-from-dim.animate-on-dim-exit,
body.is-transitioning-from-dim .animate-on-dim-exit {
    transition-property:
        opacity,
        background-color,
        color,
        border-color,
        box-shadow,
        fill, 
        stroke, 
        filter,
        background-image, 
        text-shadow
        !important; /* Ensure these transitions take precedence */
    transition-duration: var(--theme-transition-duration, 1s) !important; /* Use variable from config via CSS */
    transition-timing-function: ease-out !important;
    transition-delay: 0s !important;
}

/*
 * For elements that should NOT transition their opacity via this global rule,
 * (e.g., if their opacity is managed by GSAP or a more specific CSS rule during the theme change)
 * we can add a more specific override or ensure they don't get .animate-on-dim-exit.
 *
 * For the terminal (.actual-lcd-screen-element), its opacity is managed by its base styles
 * (--theme-component-opacity) and specific state classes. We want this to transition smoothly.
 * If it disappears, it's likely because its computed opacity in theme-dim (at the end of P9)
 * and its target opacity in theme-dark (for 'active' state) are both > 0, but the transition
 * calculation itself is problematic or an intermediate JS call briefly sets opacity to 0.
 *
 * One strategy to prevent disappearance if other opacity rules conflict:
 * Ensure the element has a defined opacity in both themes for the states it's transitioning between.
 * The .animate-on-dim-exit class itself does not set opacity to 0.
 */

body.is-transitioning-from-dim #lens-container::before,
body.is-transitioning-from-dim #lens-container::after {
    --lens-bezel-effective-transition-duration: var(--theme-transition-duration, 1s) !important;
    --lens-bezel-effective-transition-timing: ease-out !important;
}

/*
 * If specific elements like the terminal's *content area* need to avoid this global opacity transition
 * (perhaps because their visibility is tied to a parent that IS transitioning opacity),
 * they should not have the .animate-on-dim-exit class directly.
 * For example, #terminal-lcd-content's opacity is set by uiUpdater.js.
 * Its parent, .actual-lcd-screen-element, gets .animate-on-dim-exit.
 * This should be fine: the parent container transitions its overall appearance (bg, border, its own opacity),
 * and the child content area's opacity is separately managed by JS to be 1.
 */